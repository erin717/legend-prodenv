#!/usr/bin/env python3-snakemake

repo_cfg_path = 'git@github.com:erin717/legend-dataflow.git
repo_cfg_branch = 'main'

repo_par_overwrite_path = 'git@github.com:legend-exp/legend-dataflow-overrides.git'
repo_par_overwrite_branch = 'main'

repo_pygama_path = 'git@github.com:legend-exp/pygama.git'
repo_pygama_branch = 'main'

repo_dataflow_path = 'git@github.com:legend-exp/legend-dataflow.git'
repo_dataflow_branch = 'master'

import sys, json, os, string, argparse

def main():
    # check existance of env vars
    if os.getenv('PRODENV') == '':
        print('Error: source setup.sh before continuing')
        exit()

    parser = argparse.ArgumentParser(description='Initialize a new production cycle')
    parser.add_argument('prod_tag', help='name of directory in which the production cycle is created', default='')
    parser.add_argument('-r', dest='ref_cycle', action='store_true',  help='create a production cycle under prod-ref') 
    args = parser.parse_args()


    if args.ref_cycle is True:
        path_cycle = f'{os.getenv("PRODENV")}/prod-ref/{args.prod_tag}'
    else:
        path_cycle = f'{os.getenv("PRODENV")}/prod-usr/{args.prod_tag}'

    if os.path.isdir(path_cycle):
        print('Error: data production cycle with this tag already exists')
        exit()

    ###############################################################################
    # Build new production enviroment
    ###############################################################################
    os.makedirs(path_cycle)

    # Create json config file
    config_file = {
            "setups": {
                "l200": {
                    "paths": {
                        "orig":           "/project/projectdirs/legend/users/aaron717/l200_test/r007_daq",

                        "dataflow":       "$_/dataflow",

                        "inputs":         "$_/inputs",
                        "config":         "$_/inputs/config",
                        "par_overwrite":  "$_/inputs/par_overwrite",

                        "tier":           "$_/generated/tier",
                        "tier_raw":       "$_/generated/tier/raw",
                        "tier_tcm":       "$_/generated/tier/tcm",
                        "tier_dsp":       "$_/generated/tier/dsp",
                        "tier_hit":       "$_/generated/tier/hit",
                        "tier_evt":       "$_/generated/tier/evt",

                        "par":            "$_/generated/par",
                        "par_raw":        "$_/generated/par/raw",
                        "par_tcm":        "$_/generated/par/tcm",
                        "par_dsp":        "$_/generated/par/dsp",
                        "par_hit":        "$_/generated/par/hit",
                        "par_evt":        "$_/generated/par/evt",

                        "plt":            "$_/generated/plt",
                        "tmp_log":        "$_/generated/tmp/log",
                        "tmp_par":        "$_/generated/tmp/par",
			"tmp_plt":        "$_/generated/tmp/plt",
                        "src":            "$_/software/python/src",
                        "install":        "$_/software/python/install",
                        "cache":          "$_/software/python/cache"
                        },
                    "execenv": {
                        "cmd": "shifter",
                        "arg": "--image=legendexp/legend-software:lates"
                        }
                    }
                }
            }

    with open(path_cycle + '/config.json', 'w') as outfile:
        json.dump(config_file, outfile, ensure_ascii=False, indent=4)


    tmp_path = config_file["setups"]["l200"]["paths"]["inputs"]
    tmp_path = string.Template(tmp_path).substitute({'_': path_cycle})
    os.makedirs(tmp_path)

    tmp_path = config_file["setups"]["l200"]["paths"]["config"]
    tmp_path = string.Template(tmp_path).substitute({'_': path_cycle})
    os.system(f'\git clone {repo_cfg_path} {tmp_path} --branch {repo_cfg_branch}')

    tmp_path = config_file["setups"]["l200"]["paths"]["par_overwrite"]
    tmp_path = string.Template(tmp_path).substitute({'_': path_cycle})
    os.system(f'\git clone {repo_par_overwrite_path} {tmp_path} --branch {repo_par_overwrite_branch}')

    tmp_path = config_file["setups"]["l200"]["paths"]["dataflow"]
    tmp_path = string.Template(tmp_path).substitute({'_': path_cycle})
    os.system(f'\git clone {repo_dataflow_path} {tmp_path} --branch {repo_dataflow_branch}')

    tmp_path = config_file["setups"]["l200"]["paths"]["src"]
    tmp_path = string.Template(tmp_path).substitute({'_': path_cycle})
    os.system(f'\git clone {repo_pygama_path} {tmp_path}/pygama --branch {repo_pygama_branch}')

if __name__=="__main__":
    main()
